// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package postgres

import (
	"context"
	"encoding/json"
)

const createRegistration = `-- name: CreateRegistration :one
INSERT INTO registration (number_plate, vehicle, insurer)
VALUES ($1, $2, $3)
RETURNING number_plate, vehicle, insurer
`

type CreateRegistrationParams struct {
	NumberPlate string
	Vehicle     json.RawMessage
	Insurer     json.RawMessage
}

func (q *Queries) CreateRegistration(ctx context.Context, arg CreateRegistrationParams) (Registration, error) {
	row := q.db.QueryRowContext(ctx, createRegistration, arg.NumberPlate, arg.Vehicle, arg.Insurer)
	var i Registration
	err := row.Scan(&i.NumberPlate, &i.Vehicle, &i.Insurer)
	return i, err
}

const getRegistration = `-- name: GetRegistration :one
SELECT number_plate, vehicle, insurer FROM registration
WHERE number_plate = $1
`

func (q *Queries) GetRegistration(ctx context.Context, numberPlate string) (Registration, error) {
	row := q.db.QueryRowContext(ctx, getRegistration, numberPlate)
	var i Registration
	err := row.Scan(&i.NumberPlate, &i.Vehicle, &i.Insurer)
	return i, err
}

const listRegistration = `-- name: ListRegistration :many
SELECT number_plate, vehicle, insurer FROM registration
ORDER BY number_plate
`

func (q *Queries) ListRegistration(ctx context.Context) ([]Registration, error) {
	rows, err := q.db.QueryContext(ctx, listRegistration)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Registration
	for rows.Next() {
		var i Registration
		if err := rows.Scan(&i.NumberPlate, &i.Vehicle, &i.Insurer); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
